!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/papupupu/note/linux网络编程资料/day4/4-源代码/epoll_ET_LT/4-epoll_loop/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
BUFLEN	epoll_loop.c	/^#define BUFLEN /;"	d	file:
MAX_EVENTS	epoll_loop.c	/^#define MAX_EVENTS /;"	d	file:
SERV_PORT	epoll_loop.c	/^#define SERV_PORT /;"	d	file:
acceptconn	epoll_loop.c	/^void acceptconn(int lfd, int events, void *arg)$/;"	f	typeref:typename:void
arg	epoll_loop.c	/^    void *arg;                                              \/\/泛型参数$/;"	m	struct:myevent_s	typeref:typename:void *	file:
buf	epoll_loop.c	/^    char buf[BUFLEN];$/;"	m	struct:myevent_s	typeref:typename:char[]	file:
call_back	epoll_loop.c	/^    void (*call_back)(int fd, int events, void *arg);       \/\/回调函数$/;"	m	struct:myevent_s	typeref:typename:void (*)(int fd,int events,void * arg)	file:
eventadd	epoll_loop.c	/^void eventadd(int efd, int events, struct myevent_s *ev)$/;"	f	typeref:typename:void
eventdel	epoll_loop.c	/^void eventdel(int efd, struct myevent_s *ev)$/;"	f	typeref:typename:void
events	epoll_loop.c	/^    int events;                                             \/\/对应的监听事件$/;"	m	struct:myevent_s	typeref:typename:int	file:
eventset	epoll_loop.c	/^void eventset(struct myevent_s *ev, int fd, void (*call_back)(int, int, void *), void *arg)$/;"	f	typeref:typename:void
fd	epoll_loop.c	/^    int fd;                                                 \/\/要监听的文件描述符$/;"	m	struct:myevent_s	typeref:typename:int	file:
g_efd	epoll_loop.c	/^int g_efd;                                                  \/\/全局变量, 保存epoll_create/;"	v	typeref:typename:int
g_events	epoll_loop.c	/^struct myevent_s g_events[MAX_EVENTS+1];                    \/\/自定义结构体类型数组. /;"	v	typeref:struct:myevent_s[]
initlistensocket	epoll_loop.c	/^void initlistensocket(int efd, short port)$/;"	f	typeref:typename:void
last_active	epoll_loop.c	/^    long last_active;                                       \/\/记录每次加入红黑树 g_ef/;"	m	struct:myevent_s	typeref:typename:long	file:
len	epoll_loop.c	/^    int len;$/;"	m	struct:myevent_s	typeref:typename:int	file:
main	epoll_loop.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
myevent_s	epoll_loop.c	/^struct myevent_s {$/;"	s	file:
recvdata	epoll_loop.c	/^void recvdata(int fd, int events, void *arg)$/;"	f	typeref:typename:void
senddata	epoll_loop.c	/^void senddata(int fd, int events, void *arg)$/;"	f	typeref:typename:void
status	epoll_loop.c	/^    int status;                                             \/\/是否在监听:1->在红黑树上/;"	m	struct:myevent_s	typeref:typename:int	file:
