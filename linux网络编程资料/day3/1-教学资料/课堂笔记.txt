
TCP状态时序图：

	结合三次握手、四次挥手 理解记忆。


	1. 主动发起连接请求端：	CLOSE -- 发送SYN -- SEND_SYN -- 接收 ACK、SYN -- SEND_SYN -- 发送 ACK -- ESTABLISHED（数据通信态）

	2. 主动关闭连接请求端： ESTABLISHED（数据通信态） -- 发送 FIN -- FIN_WAIT_1 -- 接收ACK -- FIN_WAIT_2（半关闭）

				-- 接收对端发送 FIN -- FIN_WAIT_2（半关闭）-- 回发ACK -- TIME_WAIT（只有主动关闭连接方，会经历该状态）

				-- 等 2MSL时长 -- CLOSE 

	3. 被动接收连接请求端： CLOSE -- LISTEN -- 接收 SYN -- LISTEN -- 发送 ACK、SYN -- SYN_RCVD -- 接收ACK -- ESTABLISHED（数据通信态）

	4. 被动关闭连接请求端： ESTABLISHED（数据通信态） -- 接收 FIN -- ESTABLISHED（数据通信态） -- 发送ACK 

				-- CLOSE_WAIT (说明对端【主动关闭连接端】处于半关闭状态) -- 发送FIN -- LAST_ACK -- 接收ACK -- CLOSE


	重点记忆： ESTABLISHED、FIN_WAIT_2 <--> CLOSE_WAIT、TIME_WAIT（2MSL）

	netstat -apn | grep  端口号

2MSL时长：

	一定出现在【主动关闭连接请求端】。 --- 对应 TIME_WAIT 状态。

	保证，最后一个 ACK 能成功被对端接收。（等待期间，对端没收到我发的ACK，对端会再次发送FIN请求。）

端口复用:

	int opt = 1;		// 设置端口复用。

	setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, (void *)&opt, sizeof(opt));

半关闭：

	通信双方中，只有一端关闭通信。  --- FIN_WAIT_2

	close（cfd）;

	shutdown(int fd, int how);	

		how: 	SHUT_RD	关读端

			SHUT_WR	关写端

			SHUT_RDWR 关读写

	shutdown在关闭多个文件描述符应用的文件时，采用全关闭方法。close，只关闭一个。

	
select多路IO转接：

	原理：  借助内核， select 来监听， 客户端连接、数据通信事件。

	void FD_ZERO(fd_set *set);	--- 清空一个文件描述符集合。

		fd_set rset;

		FD_ZERO(&rset);

	void FD_SET(int fd, fd_set *set);	--- 将待监听的文件描述符，添加到监听集合中

		FD_SET(3, &rset);	FD_SET(5, &rset);	FD_SET(6, &rset);


	void FD_CLR(int fd, fd_set *set);	--- 将一个文件描述符从监听集合中 移除。

		FD_CLR（4， &rset）;

	int  FD_ISSET(int fd, fd_set *set);	--- 判断一个文件描述符是否在监听集合中。

		返回值： 在：1；不在：0；

		FD_ISSET（4， &rset）;
		
	int select(int nfds, fd_set *readfds, fd_set *writefds,fd_set *exceptfds, struct timeval *timeout);

		nfds：监听的所有文件描述符中，最大文件描述符+1

		readfds： 读 文件描述符监听集合。	传入、传出参数

		writefds：写 文件描述符监听集合。	传入、传出参数		NULL

		exceptfds：异常 文件描述符监听集合	传入、传出参数		NULL

		timeout： 	> 0: 	设置监听超时时长。

				NULL:	阻塞监听

				0：	非阻塞监听，轮询
		返回值：

			> 0:	所有监听集合（3个）中， 满足对应事件的总数。

			0：	没有满足监听条件的文件描述符

			-1： 	errno

思路分析：

	int maxfd = 0；

	lfd = socket() ;			创建套接字

	maxfd = lfd；

	bind();					绑定地址结构

	listen();				设置监听上限

	fd_set rset， allset;			创建r监听集合

	FD_ZERO(&allset);				将r监听集合清空

	FD_SET(lfd, &allset);			将 lfd 添加至读集合中。

	while（1） {

		rset = allset；			保存监听集合
	
		ret  = select(lfd+1， &rset， NULL， NULL， NULL);		监听文件描述符集合对应事件。

		if（ret > 0） {							有监听的描述符满足对应事件
		
			if (FD_ISSET(lfd, &rset)) {				// 1 在。 0不在。

				cfd = accept（）；				建立连接，返回用于通信的文件描述符

				maxfd = cfd；

				FD_SET(cfd, &allset);				添加到监听通信描述符集合中。
			}

			for （i = lfd+1； i <= 最大文件描述符; i++）{

				FD_ISSET(i, &rset)				有read、write事件

				read（）

				小 -- 大

				write();
			}	
		}
	}

select优缺点：

	缺点：	监听上限受文件描述符限制。 最大 1024.

		检测满足条件的fd， 自己添加业务逻辑提高小。 提高了编码难度。

	优点：	跨平台。win、linux、macOS、Unix、类Unix、mips

	
	
	



























		
				
